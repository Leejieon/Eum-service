pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = 'dockerhub-credentials'
        DEPLOY_SERVER_CREDENTIALS = 'ec2-ssh-key'
        DEPLOY_SERVER = 'ubuntu@k11d101.p.ssafy.io'
        CHECK_SERVER = 'k11d101.p.ssafy.io'
        PROJECT_ROOT = '/home/ubuntu'
        SERVICE_NAME = 'apigateway-service'
        IMAGE_NAME = "yechanissm2/${SERVICE_NAME}"
    }

    stages {
        stage('Checkout') {
            steps {
                deleteDir()
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/backend/develop']],
                    extensions: [
                        [$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [[path: "backend/${SERVICE_NAME}"]]],
                        [$class: 'RelativeTargetDirectory', relativeTargetDir: "backend/${SERVICE_NAME}"]
                    ],
                    userRemoteConfigs: [[
                        url: 'https://lab.ssafy.com/s11-final/S11P31D101.git',
                        credentialsId: 'gitlab_credentials'
                    ]]
                ])
            }
        }

        stage('Copy Secret File') {
                            steps {
                                withCredentials([file(credentialsId: 'application-secret-yml', variable: 'APPLICATION_YML')]) {
                                    sh """
                                        mkdir -p backend/${SERVICE_NAME}/src/main/resources
                                        cp ${APPLICATION_YML} backend/${SERVICE_NAME}/src/main/resources/application-secret.yml
                                    """
                                }
                            }
                        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${env.IMAGE_NAME}:latest", "--no-cache -f backend/${SERVICE_NAME}/Dockerfile backend/${SERVICE_NAME}")
                }
            }
        }

        stage('Push to DockerHub') {
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', env.DOCKERHUB_CREDENTIALS) {
                        docker.image("${env.IMAGE_NAME}:latest").push()
                    }
                }
            }
        }

        stage('Deploy to Server') {
            steps {
                sshagent([env.DEPLOY_SERVER_CREDENTIALS]) {
                    sh """
                        ssh -o StrictHostKeyChecking=no ${env.DEPLOY_SERVER} '
                            cd ${env.PROJECT_ROOT} &&
                            docker-compose stop ${SERVICE_NAME} &&
                            docker-compose rm -f ${SERVICE_NAME} &&
                            docker-compose pull ${SERVICE_NAME} &&
                            docker-compose up -d --force-recreate --no-deps ${SERVICE_NAME} &&
                            docker image prune -f --filter "dangling=true"
                        '
                    """
                }
            }
        }
    }

    post {
        success {
            mattermostSend(color: 'good', message: "${SERVICE_NAME} 배포 성공.")
        }
        failure {
            mattermostSend(color: 'danger', message: "${SERVICE_NAME} 배포 실패. 수동 확인이 필요합니다.")
        }
    }
}

